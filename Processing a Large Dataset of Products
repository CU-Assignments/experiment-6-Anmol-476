import java.util.*;
import java.util.stream.*;

class Product {
    String name, category;
    double price;

    Product(String name, String category, double price) {
        this.name = name;
        this.category = category;
        this.price = price;
    }
}

public class ProductProcessing {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
            new Product("Laptop", "Electronics", 70000),
            new Product("Phone", "Electronics", 50000),
            new Product("Shirt", "Clothing", 2000),
            new Product("Jeans", "Clothing", 3000),
            new Product("Fridge", "Appliances", 25000)
        );

        Map<String, List<Product>> groupedByCategory = products.stream()
            .collect(Collectors.groupingBy(p -> p.category));

        Map<String, Optional<Product>> maxProductInCategory = products.stream()
            .collect(Collectors.groupingBy(p -> p.category, 
                Collectors.maxBy(Comparator.comparingDouble(p -> p.price))));

        double avgPrice = products.stream()
            .mapToDouble(p -> p.price)
            .average()
            .orElse(0);

        groupedByCategory.forEach((category, prodList) -> {
            System.out.println(category + ": " + prodList.size() + " products");
        });

        maxProductInCategory.forEach((category, product) -> {
            product.ifPresent(p -> System.out.println("Most Expensive in " + category + ": " + p.name + " - " + p.price));
        });

        System.out.println("Average Price: " + avgPrice);
    }
}
